# Generated by Django 5.1.5 on 2025-02-07 17:49

import django.core.validators
import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):
    initial = True

    dependencies = []

    operations = [
        migrations.CreateModel(
            name="Player",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("exid", models.CharField(editable=False, max_length=255, unique=True)),
                ("first_name", models.CharField(max_length=255)),
                ("last_name", models.CharField(max_length=255)),
            ],
            options={
                "get_latest_by": ["created_at"],
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="Referee",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("exid", models.CharField(editable=False, max_length=255, unique=True)),
                ("first_name", models.CharField(max_length=255)),
                ("last_name", models.CharField(max_length=255)),
            ],
            options={
                "get_latest_by": ["created_at"],
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="Team",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("exid", models.CharField(editable=False, max_length=255, unique=True)),
                ("name", models.CharField(max_length=255)),
            ],
            options={
                "get_latest_by": ["created_at"],
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="League",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("exid", models.CharField(editable=False, max_length=255, unique=True)),
                ("name", models.CharField(max_length=255)),
                ("season", models.CharField(max_length=255)),
            ],
            options={
                "unique_together": {("name", "season")},
            },
        ),
        migrations.CreateModel(
            name="LeagueTeam",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "league",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="%(class)ss",
                        related_query_name="%(class)ss",
                        to="core.league",
                    ),
                ),
                (
                    "team",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="%(class)ss",
                        related_query_name="%(class)ss",
                        to="core.team",
                    ),
                ),
            ],
            options={
                "get_latest_by": ["created_at"],
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="Game",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("exid", models.CharField(editable=False, max_length=255, unique=True)),
                ("game_at", models.DateTimeField()),
                (
                    "home_score",
                    models.PositiveIntegerField(validators=[django.core.validators.MinValueValidator(0)]),
                ),
                (
                    "away_score",
                    models.PositiveIntegerField(validators=[django.core.validators.MinValueValidator(0)]),
                ),
                (
                    "league",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="%(class)ss",
                        related_query_name="%(class)ss",
                        to="core.league",
                    ),
                ),
                (
                    "away_team",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="away_games",
                        related_query_name="away_games",
                        to="core.leagueteam",
                    ),
                ),
                (
                    "home_team",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="home_games",
                        related_query_name="home_games",
                        to="core.leagueteam",
                    ),
                ),
                (
                    "aux_referee",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="aux_games",
                        related_query_name="aux_games",
                        to="core.referee",
                    ),
                ),
                (
                    "main_referee",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="main_games",
                        related_query_name="main_games",
                        to="core.referee",
                    ),
                ),
            ],
            options={
                "get_latest_by": ["created_at"],
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="BoxscoreEntry",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("is_starter", models.BooleanField()),
                ("minutes", models.DurationField()),
                (
                    "points",
                    models.PositiveIntegerField(validators=[django.core.validators.MinValueValidator(0)]),
                ),
                (
                    "assists",
                    models.PositiveIntegerField(validators=[django.core.validators.MinValueValidator(0)]),
                ),
                (
                    "steals",
                    models.PositiveIntegerField(validators=[django.core.validators.MinValueValidator(0)]),
                ),
                (
                    "turnovers",
                    models.PositiveIntegerField(validators=[django.core.validators.MinValueValidator(0)]),
                ),
                (
                    "two_point_made",
                    models.PositiveIntegerField(validators=[django.core.validators.MinValueValidator(0)]),
                ),
                (
                    "two_point_attempted",
                    models.PositiveIntegerField(validators=[django.core.validators.MinValueValidator(0)]),
                ),
                (
                    "three_point_made",
                    models.PositiveIntegerField(validators=[django.core.validators.MinValueValidator(0)]),
                ),
                (
                    "three_point_attempted",
                    models.PositiveIntegerField(validators=[django.core.validators.MinValueValidator(0)]),
                ),
                (
                    "field_goal_made",
                    models.PositiveIntegerField(validators=[django.core.validators.MinValueValidator(0)]),
                ),
                (
                    "field_goal_attempted",
                    models.PositiveIntegerField(validators=[django.core.validators.MinValueValidator(0)]),
                ),
                (
                    "free_throw_made",
                    models.PositiveIntegerField(validators=[django.core.validators.MinValueValidator(0)]),
                ),
                (
                    "free_throw_attempted",
                    models.PositiveIntegerField(validators=[django.core.validators.MinValueValidator(0)]),
                ),
                (
                    "offensive_rebounds",
                    models.PositiveIntegerField(validators=[django.core.validators.MinValueValidator(0)]),
                ),
                (
                    "defensive_rebounds",
                    models.PositiveIntegerField(validators=[django.core.validators.MinValueValidator(0)]),
                ),
                (
                    "fouls_made",
                    models.PositiveIntegerField(validators=[django.core.validators.MinValueValidator(0)]),
                ),
                (
                    "fouls_received",
                    models.PositiveIntegerField(validators=[django.core.validators.MinValueValidator(0)]),
                ),
                (
                    "blocks_made",
                    models.PositiveIntegerField(validators=[django.core.validators.MinValueValidator(0)]),
                ),
                (
                    "blocks_received",
                    models.PositiveIntegerField(validators=[django.core.validators.MinValueValidator(0)]),
                ),
                (
                    "dunks",
                    models.PositiveIntegerField(validators=[django.core.validators.MinValueValidator(0)]),
                ),
                ("ranking", models.IntegerField()),
                ("point_balance", models.IntegerField()),
                (
                    "game",
                    models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="core.game"),
                ),
                (
                    "team",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        to="core.leagueteam",
                    ),
                ),
                (
                    "player",
                    models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to="core.player"),
                ),
            ],
            options={
                "unique_together": {("game", "team", "player")},
            },
        ),
    ]
